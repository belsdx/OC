1. Что такое ООП? – Полное определение
Объектно-ориентированное программирование (ООП) — это парадигма программирования, основанная на концепции объектов, которые представляют собой комбинацию данных (атрибутов) и поведения (методов). ООП используется для моделирования реальных систем и обеспечивает следующие ключевые свойства:

Инкапсуляция: Объединение данных и методов внутри объекта. Это позволяет скрыть детали реализации и обеспечивать доступ только через интерфейсы.

Наследование: Возможность создавать новые классы на основе существующих, обеспечивая повторное использование кода.

Полиморфизм: Объекты могут использовать методы с одинаковым именем, которые реализуют разное поведение в зависимости от конкретного класса.

Абстракция: Сокрытие сложных деталей и предоставление только необходимых интерфейсов.

2. Магическое число 7 Миллера – Примеры из IT
Число Миллера связано с ограничением кратковременной памяти человека: люди могут одновременно удерживать в памяти около 7±2 элементов. Это влияние заметно в IT:

Длина телефонных номеров: Стандарты телефонных номеров часто соответствуют 7 цифрам.

Максимальное количество пунктов в меню: Например, в интерфейсах пользовательских приложений количество пунктов меню стараются ограничить до 7.

Размер команд разработки: Оптимальная команда обычно состоит из 5-9 человек.

Элементы на экране: Количество иконок на главном экране телефона или рабочего стола часто ограничено числом, близким к 7.

Список задач (To-Do List): Рекомендуемое число одновременно видимых задач.

Размер кэша процессоров: Архитекторы процессоров часто балансируют размеры уровней кэша, чтобы учитывать когнитивные ограничения.

Количество вкладок в браузере: Пользователи нередко структурируют вкладки по группам около 7.

3. Энтропия ПО – Примеры негативных энтропийных мер
Энтропия в ПО относится к хаосу или неопределенности в разработке. Негативные меры энтропии предотвращают деградацию программного обеспечения. Примеры:

Код-ревью:

Регулярная проверка кода коллегами помогает избежать ошибок и улучшить читаемость.

Линтинг (Linting):

Использование инструментов для проверки стиля и ошибок в коде, например, ESLint для JavaScript.

Модульное тестирование:

Пишутся тесты, чтобы убедиться, что отдельные модули работают корректно.

Документирование:

Подробное описание кода, интерфейсов и API снижает энтропию в команде.

Рефакторинг:

Постоянное улучшение структуры кода, например, удаление дублирования или упрощение алгоритмов.

4. 5 признаков сложной системы по Гради Бучу
Гради Буч выделяет 5 признаков сложных систем. Примеры из лабораторных работ или pet-проектов:

Иерархия:

Пример: В проекте управления учебными курсами были уровни: Пользователи > Роли > Права доступа.

В pet-проекте для системы блогов: Посты > Комментарии > Ответы.

Эмерджентное поведение:

Пример: В симуляции многопользовательской игры игроки начали взаимодействовать неожиданным образом, например, создавать альянсы.

Автоматические рекомендации в проекте на основе анализа поведения пользователей.

Абстракция:

Пример: Использование классов для описания пользователей (админы, студенты) в управлении курсами.

Для API проектирования: разработка абстрактного интерфейса вместо детальной реализации.

Множественные представления:

Пример: Проект имел интерфейсы для студентов (видимость курсов) и администраторов (управление курсами).

В pet-проекте система отчетов могла представлять данные как в табличной форме, так и в виде графиков.

Эволюция:

Пример: Система управления курсами сначала поддерживала только текстовые курсы, но затем была адаптирована под видео.

Пет-проект блога был переработан для поддержки личных сообщений между пользователями.

5. Закон иерархических компенсаций Седова
Закон Седова утверждает, что если одна часть системы становится проще, другая становится сложнее. Примеры из IT:

Облачные вычисления:

Пользователи получают упрощенный интерфейс работы с данными (например, Google Docs), но инфраструктура облака становится невероятно сложной.

Фреймворки:

Использование фреймворков, таких как Django или React, упрощает разработку, но усложняет их устройство.

Мобильные устройства:

Простота интерфейсов смартфонов скрывает невероятно сложные операционные системы.

Базы данных:

Высокоуровневые запросы SQL упрощают работу с данными, но двигатели баз данных (например, MySQL) становятся сложными.

Виртуализация:

Простота управления виртуальными машинами приводит к более сложным гипервизорам (например, VMware ESXi).
